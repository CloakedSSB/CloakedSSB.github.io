{"version":3,"sources":["body/SettingsDialog.js","header/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["Settings","props","react_default","a","createElement","Typography_default","Stages","Connection","SettingsDialog","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","setState","tab","handleClose","open","state","prevProps","prevState","snapshot","Dialog_default","fullWidth","maxWidth","onClose","Tabs_default","variant","indicatorColor","textColor","onChange","Tab_default","label","DialogContent_default","SettingsDialog_Settings","DialogActions_default","Button_default","onClick","color","autoFocus","React","Component","myAppBar","openSettings","_this2","classes","className","root","AppBar_default","Toolbar_default","style","display","flexDirection","alignItems","IconButton_default","rightButton","Settings_default","body_SettingsDialog","withStyles","flexGrow","justifyContent","grow","menuButton","marginLeft","marginRight","alignSelf","theme","createMuiTheme","palette","primary","blue","secondary","red","App","MuiThemeProvider_default","header_AppBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a69a8b47.chunk.js","sourcesContent":["import React from 'react'\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Settings(props) {\n\n  return(\n    <Typography>Settings</Typography>\n  );\n\n}\n\nfunction Stages(props) {\n\n  return(\n    <Typography>Stages</Typography>\n  );\n\n}\n\nfunction Connection(props) {\n\n  return(\n    <Typography>Connection</Typography>\n  );\n\n}\n\nclass SettingsDialog extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n      tab: 0,\n      open: this.props.open\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps !== this.props) {\n      this.setState({\n        open: this.props.open\n      })\n    }\n  }\n\n\n  handleChange = (event, value) => {\n    this.setState({ tab: value });\n  };\n\n  handleClose = () => {\n    this.setState({open: false})\n  };\n\n  render() {\n\n    return (\n      <Dialog open={this.state.open} fullWidth maxWidth={\"lg\"} onClose={this.handleClose}>\n\n        <Tabs\n          value={this.state.tab}\n          variant={\"fullWidth\"}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={this.handleChange}\n        >\n          <Tab label=\"Settings\" />\n          <Tab label=\"Stages\" />\n          <Tab label=\"Connection\" />\n        </Tabs>\n        <DialogContent>\n          {this.state.tab === 0 && <Settings/>}\n          {this.state.tab === 1 && <Stages/>}\n          {this.state.tab === 2 && <Connection/>}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n}\n\n\nexport default SettingsDialog","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SettingsDialog from  '../body/SettingsDialog'\n\n\nconst styles = {\n    root: {\n      flexGrow: 1,\n      justifyContent: \"space-between\"\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    rightButton: {\n        alignSelf: \"flex-right\"\n    }\n};\n\nclass myAppBar extends React.Component{\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          openSettings: false\n        }\n    }\n\n    onClick() {\n      this.setState({\n        openSettings: !this.state.openSettings\n      })\n    }\n\n    render() {\n        const {classes} = this.props;\n        return (\n          <div className={classes.root}>\n              <AppBar>\n                  <Toolbar className={classes.root}>\n                      <div style={{display: 'flex', flexDirection: 'row', alignItems: \"center\"}}>\n                          <Typography variant={\"h6\"} color={\"inherit\"}>Stage Bans</Typography>\n                      </div>\n                      <div>\n                          <IconButton className={classes.rightButton} color={\"inherit\"} onClick={() => this.onClick()}>\n                              <SettingsIcon/>\n                          </IconButton>\n                      </div>\n                  </Toolbar>\n              </AppBar>\n            <SettingsDialog open={this.state.openSettings}/>\n          </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(myAppBar);\n","import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from './header/AppBar'\nimport blue from \"@material-ui/core/colors/blue\";\nimport red from \"@material-ui/core/colors/red\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\n\nconst theme = createMuiTheme(\n    {\n      palette: {\n        primary: blue,\n        secondary: red,\n      },\n    }\n);\n\nfunction App(props) {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div>\n        <AppBar/>\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}